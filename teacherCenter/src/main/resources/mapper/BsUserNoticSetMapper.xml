<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xue.dao.BsUserNoticSetMapper" >
  <resultMap id="BaseResultMap" type="com.xue.model.BsUserNoticSet" >
    <id column="user_id" property="userId" jdbcType="VARCHAR" />
    <id column="notic_id" property="noticId" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, notic_id, state
  </sql>
  <select id="findNoticeInUserId" resultMap="BaseResultMap">  
	 	Select  
	 	<include refid="Base_Column_List" />  
	 	from bs_user_notic_set where notic_id in  
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
		  #{item}  
		</foreach>  
</select>
  <select id="findNoticeByUserId" resultMap="BaseResultMap" parameterType="com.xue.model.BsUserNoticSetKey" >
		   SELECT
			*
		FROM
			bs_user_notic_set
		WHERE
			user_id = "teacher" AND state = 0
  </select>
  
  <insert id="batchInsert" parameterType="java.util.List">
  	 insert into bs_user_notic_set (user_id, notic_id, state)
    values
	  <foreach collection="list" item="item" index="index" separator="," >
 		 (#{item.userId,jdbcType=VARCHAR},#{item.noticId,jdbcType=INTEGER},#{item.state,jdbcType=INTEGER})
  	  </foreach>
	</insert>
  <select id="readNotice" resultType="java.lang.Integer">
		   SELECT
			count(*)
		FROM
			bs_user_notic_set buns
		INNER JOIN bs_notice bn ON buns.user_id = "teacher"
		AND buns.state = 1
		AND bn.id = buns.notic_id
  </select>
	<select id="readNoNotice" resultType="java.lang.Integer">
		   SELECT
			count(*)
		FROM
			bs_user_notic_set buns
		INNER JOIN bs_notice bn ON buns.user_id = "teacher"
		AND buns.state = 0
		AND bn.id = buns.notic_id
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.xue.model.BsUserNoticSetKey" >
    select 
    <include refid="Base_Column_List" />
    from bs_user_notic_set
    where user_id = #{userId,jdbcType=INTEGER}
      and notic_id = #{noticId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.xue.model.BsUserNoticSetKey" >
    delete from bs_user_notic_set
    where user_id = #{userId,jdbcType=INTEGER}
      and notic_id = #{noticId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xue.model.BsUserNoticSet" >
    insert into bs_user_notic_set (user_id, notic_id, state
      )
    values (#{userId,jdbcType=VARCHAR}, #{noticId,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xue.model.BsUserNoticSet" >
    insert into bs_user_notic_set
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="noticId != null" >
        notic_id,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="noticId != null" >
        #{noticId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xue.model.BsUserNoticSet" >
    update bs_user_notic_set
    <set >
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
      and notic_id = #{noticId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xue.model.BsUserNoticSet" >
    update bs_user_notic_set
    set state = #{state,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=VARCHAR}
      and notic_id = #{noticId,jdbcType=INTEGER}
  </update>
</mapper>