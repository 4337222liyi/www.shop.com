<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xue.dao.StudentInfoDetailMapper" >
  <resultMap id="BaseResultMap" type="com.xue.model.StudentInfoDetail" > 
    <result column="student_id" property="studentId" jdbcType="VARCHAR" />
    <result column="realName" property="realName" jdbcType="VARCHAR" />
    <result column="nickName" property="nickName" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="mobilePhone" property="mobilePhone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="qq" property="qq" jdbcType="VARCHAR" />
    <result column="idiograph" property="idiograph" jdbcType="VARCHAR" />
    <result column="education" property="education" jdbcType="INTEGER" />
    <result column="school" property="school" jdbcType="VARCHAR" />
    <result column="major" property="major" jdbcType="VARCHAR" />
    <result column="company" property="company" jdbcType="INTEGER" />
    <result column="job" property="job" jdbcType="INTEGER" />
    <result column="city" property="city" jdbcType="INTEGER" />
    <result column="birthday" property="birthday" jdbcType="INTEGER" />
    <result column="course_property" property="courseProperty" jdbcType="INTEGER" /> 
    <result column="student_source" property="studentSource" jdbcType="INTEGER" />
    <result column="intention" property="intention" jdbcType="INTEGER" />
    <result column="intention_ramark" property="intentionRamark" jdbcType="VARCHAR" />
    <result column="apply_intention" property="applyIntention" jdbcType="VARCHAR" />
    <result column="apply_classes" property="applyClasses" jdbcType="VARCHAR" /> 
  </resultMap>
  
  <resultMap type="com.xue.dto.StudentAndDetailsResult" id="StudentInfoAndDetails" extends="BaseResultMap">
     <result column="course_property" property="courseProperty" jdbcType="INTEGER" />
     <result column="student_source" property="studentSource" jdbcType="INTEGER" />
     <result column="intention" property="intention" jdbcType="INTEGER" />
     <result column="intention_ramark" property="intentionRamark" jdbcType="VARCHAR" />
     <result column="apply_intention" property="applyIntention" jdbcType="VARCHAR" />
     <result column="apply_classes" property="applyClasses" jdbcType="VARCHAR" /> 
  </resultMap>
  
  <resultMap type="com.xue.dto.PageBean" id="pageBean"></resultMap>
  
  <sql id="Base_Column_List" >
      student_id, realName, nickName,sex,mobilePhone, email, qq,
    idiograph,education,school,major,company,job,city,birthday,course_property
    ,student_source,intention,intention_ramark,apply_intention,apply_classes  
  </sql>
   
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from student_info
    where student_id = #{studentId,jdbcType=VARCHAR}
  </select>
  
  <select id="queryAllStudentsForPage" resultMap="StudentInfoAndDetails" parameterType="com.xue.vo.query.AllStudentQuery" >
    select *from ((select *from student_info
    <where>
       is_del='0'
        <if test="mobile !=null and mobile != ''">   
	     	and mobile like concat('%',#{mobile,jdbcType=VARCHAR}, '%')
		</if> 
		<if test="studentId !=null and studentId != ''">   
	     	and student_id like concat('%',#{studentId,jdbcType=VARCHAR}, '%')
		</if> 
		<if test="studentName !=null and studentName != ''">   
	     	and student_name like concat('%',#{studentName,jdbcType=VARCHAR}, '%')
		</if> 
    </where>
    ) si
left join student_info_detail sid
on si.student_id = sid.student_id ) 
   <where>
		<if test="intention !=0 and intention != '0'">  
	     	 intention =  #{intention,jdbcType=VARCHAR} 
		</if>   
   </where>
   limit #{startNum,jdbcType=INTEGER},5 
  </select>
  
  <select id="queryCount" resultType="java.lang.Integer" parameterType="com.xue.vo.query.AllStudentQuery" > 
         select  count(*) from ((select *from student_info
         <where>
           is_del='0'
           <if test="mobile !=null and mobile != ''">   
	     	   and mobile like concat('%',#{mobile,jdbcType=VARCHAR}, '%')
		   </if> 
			<if test="studentId !=null and studentId != ''">   
		       and student_id like concat('%',#{studentId,jdbcType=VARCHAR}, '%')
			</if> 
			<if test="studentName !=null and studentName != ''">   
		       and student_name like concat('%',#{studentName,jdbcType=VARCHAR}, '%')
			</if>  
         </where>
         ) si
left join student_info_detail sid
on si.student_id = sid.student_id )
   <where>
		<if test="intention !=0 and intention != '0'">  
	     	 intention =  #{intention,jdbcType=VARCHAR} 
		</if>  
   </where>
 </select>
  
  <select id="queryByKeyword" resultMap="BaseResultMap" parameterType="java.util.HashMap">
     select 
    <include refid="Base_Column_List" />
    from student_info
    where    is_del='0' and student_id like concat('%',#{keyword,jdbcType=VARCHAR}, '%') limit #{startNum,jdbcType=INTEGER},5
  </select>
  
    <select id="queryCountByKeyword" resultType="java.lang.Integer" parameterType="java.lang.String">
       select count(*) from student_info where  is_del='0'  and student_id like concat('%', #{keyword,jdbcType=VARCHAR}, '%')
  </select>
   
   <select id="queryAllStudents" resultMap="BaseResultMap">
     select 
    <include refid="Base_Column_List" />
    from student_info where is_del='0'
  </select>
  
  <select id="queryStudentByShop" resultMap="BaseResultMap" parameterType="com.xue.vo.query.AllStudentQuery">  
     select result.* from (select  DISTINCT si.student_id as student_id1, si.* from (select  *  from student_info where is_del='0') si 
inner join student_shop_set sss on si.student_id=sss.STUDENT_ID 
inner join (select *from shop where major_id=#{majorId,jdbcType=VARCHAR}) s on sss.SHOP_ID=s.SHOP_ID  )result limit #{startNum,jdbcType=INTEGER},5;
  </select>
  
  <select id="queryStudentByShopCount" resultType="java.lang.Integer" parameterType="com.xue.vo.query.AllStudentQuery">
   select  count(*) from (select  DISTINCT si.student_id as student_id1, si.* from (select  *  from student_info where is_del='0') si 
inner join student_shop_set sss on si.student_id=sss.STUDENT_ID 
inner join (select *from shop where major_id=#{majorId,jdbcType=VARCHAR}) s on sss.SHOP_ID=s.SHOP_ID  )result;
  </select>
  
  <select id="queryStudentByShopKeyword" resultMap="BaseResultMap" parameterType="com.xue.vo.query.AllStudentQuery">
          select result.* from (select  DISTINCT si.student_id as student_id1, si.* from (select  *  from student_info where is_del='0' and student_id like concat('%',#{keyword,jdbcType=VARCHAR}, '%')) si 
inner join student_shop_set sss on si.student_id=sss.STUDENT_ID 
inner join (select *from shop where major_id=#{majorId,jdbcType=VARCHAR}) s on sss.SHOP_ID=s.SHOP_ID  )result limit #{startNum,jdbcType=INTEGER},5;
  </select>
  
  <select id="queryStudentByShopKeywordCount" resultType="java.lang.Integer" parameterType="com.xue.vo.query.AllStudentQuery">
   select  count(*) from (select  DISTINCT si.student_id as student_id1, si.* from (select  *  from student_info where is_del='0' and student_id like concat('%',#{keyword,jdbcType=VARCHAR}, '%')) si 
inner join student_shop_set sss on si.student_id=sss.STUDENT_ID 
inner join (select *from shop where major_id=#{majorId,jdbcType=VARCHAR}) s on sss.SHOP_ID=s.SHOP_ID  )result;
   </select>
   
   <select id="downExcel" resultMap="BaseResultMap" parameterType="com.xue.vo.query.AllStudentQuery">
        select result.* from (select  DISTINCT si.student_id as student_id1, si.* from (select  *  from student_info where is_del='0') si 
inner join student_shop_set sss on si.student_id=sss.STUDENT_ID 
inner join (select *from shop where major_id=#{majorId,jdbcType=VARCHAR}) s on sss.SHOP_ID=s.SHOP_ID  )result;
   </select>
   
   <select id="findByStudentId" resultMap="BaseResultMap" parameterType="java.lang.String">
     select  <include refid="Base_Column_List"/> 
    from student_info_detail where student_id=#{studentId,jdbcType=VARCHAR}
   </select>
  
   <select id="login" resultMap="BaseResultMap" parameterType="com.xue.vo.query.StudentInfoQuery" >
    select 
    <include refid="Base_Column_List" />
    from student_info
    <where>
		<if test="email !=null and email != ''">  
	     	 AND email =  #{email,jdbcType=VARCHAR} 
		</if> 
		<if test="mobile !=null and mobile != ''">  
	     	 AND mobile =  #{mobile,jdbcType=VARCHAR} 
		</if> 
		<if test="studentName !=null and studentName != ''">  
	     	 AND student_name =  #{studentName,jdbcType=VARCHAR} 
		</if> 
		<if test="password !=null and password != ''">  
	     	 AND password =  #{password,jdbcType=VARCHAR} 
		</if>
	 </where>
  </select>
  
   <select id="findByStudentName" resultMap="BaseResultMap" parameterType="com.xue.vo.query.StudentInfoQuery" >
    select 
    <include refid="Base_Column_List" />
    from student_info
    <where>
		<if test="studentName !=null and studentName != ''">  
	     	 OR student_name =  #{studentName,jdbcType=VARCHAR} 
		</if> 
		<if test="mobile !=null and mobile != ''">  
	     	 OR mobile =  #{mobile,jdbcType=VARCHAR} 
		</if> 
	</where>
  </select>
  
  <select id="findByStudentMobile" resultMap="BaseResultMap" parameterType="com.xue.vo.query.StudentInfoQuery">
   select 
    <include refid="Base_Column_List" />   from student_info where mobile =  #{mobile,jdbcType=VARCHAR}   
  </select>
   
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from student_info
    where student_id = #{studentId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xue.model.StudentInfoDetail" >
    insert into student_info_detail (student_id, realName, nickName, 
      sex, mobilePhone, email, qq, idiograph,education,school,major,
      company,job,city,birthday,course_property,student_source,intention,
      intention_ramark,apply_intention,apply_classes
      )
    values (
     #{studentId,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR},  #{sex,jdbcType=INTEGER},   #{mobilePhone,jdbcType=VARCHAR},  
    #{email,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{idiograph,jdbcType=VARCHAR}, #{education,jdbcType=INTEGER},   #{school,jdbcType=VARCHAR},
    #{major,jdbcType=VARCHAR},  #{company,jdbcType=VARCHAR},#{job,jdbcType=VARCHAR},#{city,jdbcType=VARCHAR},  #{birthday,jdbcType=VARCHAR},
    #{courseProperty,jdbcType=INTEGER},#{studentSource,jdbcType=INTEGER},#{intention,jdbcType=INTEGER}, #{intentionRamark,jdbcType=VARCHAR},   #{applyIntention,jdbcType=VARCHAR}, 
    #{applyClasses,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xue.model.StudentInfo" >
    insert into student_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="studentName != null" >
        student_name,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="lastPwd != null" >
        last_pwd,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastLoginTime != null" >
        last_login_time,
      </if>
      <if test="currentLoginTime != null" >
        current_login_time,
      </if>
      <if test="cookieValue != null" >
        cookie_value,
      </if>
      <if test="isDel != null" >
        is_del,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="lastPwd != null" >
        #{lastPwd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null" >
        #{lastLoginTime,jdbcType=VARCHAR},
      </if>
      <if test="currentLoginTime != null" >
        #{currentLoginTime,jdbcType=VARCHAR},
      </if>
      <if test="cookieValue != null" >
        #{cookieValue,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null" >
        #{isDel,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xue.model.StudentInfo" >
    update student_info
    <set >
      <if test="studentName != null" >
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="lastPwd != null" >
        last_pwd = #{lastPwd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime,jdbcType=VARCHAR},
      </if>
      <if test="currentLoginTime != null" >
        current_login_time = #{currentLoginTime,jdbcType=VARCHAR},
      </if>
      <if test="cookieValue != null" >
        cookie_value = #{cookieValue,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null" >
        is_del = #{isDel,jdbcType=VARCHAR},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xue.model.StudentInfo" >
    update student_info
    set student_name = #{studentName,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      last_pwd = #{lastPwd,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      last_login_time = #{lastLoginTime,jdbcType=VARCHAR},
      current_login_time = #{currentLoginTime,jdbcType=VARCHAR},
      cookie_value = #{cookieValue,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=VARCHAR}
    where student_id = #{studentId,jdbcType=VARCHAR}
  </update>
  
  <update id="resetPassword" parameterType="com.xue.vo.query.ResetPasswordQuery">
      update student_info   set password = #{defaultPassword,jdbcType=VARCHAR}    where mobile = #{mobile,jdbcType=VARCHAR}
  </update>
  
  <update id="deleteStudentByPhone"   parameterType="java.util.HashMap">
      update student_info   set is_del = '1'    where mobile = #{mobile,jdbcType=VARCHAR}
  </update>
  
</mapper>