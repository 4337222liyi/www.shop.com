<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close" >
    <property name="driverClassName">
      <value>${jdbc_driverClassName}</value>
    </property>
    <property name="url">
      <value>${jdbc_url}</value>
    </property>
    <property name="username">
      <value>${jdbc_username}</value>
    </property>
    <property name="password">
      <value>${jdbc_password}</value>
    </property>
     <!-- 初始化连接数量 -->
     <property name="initialSize" value="${initialSize}" />
     <!-- 最大并发连接数 -->
     <property name="maxActive" value="${maxActive}" />
     <!-- 最大空闲连接数 -->
     <!-- <property name="maxIdle" value="${maxIdle}" /> -->
     <!-- 最小空闲连接数 -->
     <property name="minIdle" value="${minIdle}" />
     <!-- 配置获取连接等待超时的时间 -->     
     <property name="maxWait" value="${maxWait}" />
     <!-- 超过时间限制是否回收 -->
     <property name="removeAbandoned" value="${removeAbandoned}" />
     <!-- 超过时间限制多长； -->
     <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
     <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
     <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
     <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
     <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
     <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
     <property name="validationQuery" value="${validationQuery}" />
     <!-- 申请连接的时候检测 -->
     <property name="testWhileIdle" value="${testWhileIdle}" />
     <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
     <property name="testOnBorrow" value="${testOnBorrow}" />
     <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
     <property name="testOnReturn" value="${testOnReturn}" />
     <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
     <property name="poolPreparedStatements" value="${poolPreparedStatements}" />     
     <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
     <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
             监控统计用的filter:stat
             日志用的filter:log4j
            防御SQL注入的filter:wall -->
     <property name="filters" value="${filters}" />    
     <property name="connectionProperties">
       <value>clientEncoding=UTF-8</value>
     </property>
  </bean>
    
  <!-- myBatis文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" /> 
  		<property name="typeAliasesPackage" value="com.isea533.ssm.model"/>
		  <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>
  </bean>
  <!-- spring与mybatis整合配置，扫描所有dao -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
        p:basePackage="com.xue.dao" 
        p:sqlSessionFactoryBeanName="sqlSessionFactory"/>
 
  <!-- 对数据源进行事务管理 -->
  <bean id="transactionManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="dataSource"/>
        
 	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.xue..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
  
        
        
        
</beans>